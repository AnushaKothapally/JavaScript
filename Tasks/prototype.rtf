{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red50\green51\blue45;\red255\green255\blue255;}
\margl1440\margr1440\vieww21100\viewh12180\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs28 \cf0 \
/* */\
function PrintStuff(myDocuments) \{\
  this.documents = myDocuments;\
\}\
PrintStuff.prototype.print = function () \{\
  console.log(this.documents);\
\}\
var obj = new PrintStuff('123');\
obj.print(); console.log(obj.constructor);\
\
/*1.
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if you want to access a property of an object, the search for the property begins directly on the object. If the JS runtime can\'92t find the property there, it then looks for the property on the object\'92s prototype\'97the object it inherited its properties from.\
\pard\pardeftab720
\cf2 If the property is not found on the object\'92s prototype, the search for the property then moves to prototype of the object\'92s prototype (the father of the object\'92s father\'97the grandfather). And this continues until there is no more prototype (no more great-grand father; no more lineage to follow). 
\f2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 This in essence is the prototype chain:
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  the chain from an object\'92s prototype to its prototype\'92s prototype and onwards. And JavaScript uses this prototype chain to look for properties and methods of an object.\
2.  JavaScript has a prototype-based inheritance mechanism.Inheritance is a programming paradigm where objects (or Classes in some languages) can inherit properties and methods from other objects (or Classes). & In below example, when we add properties and methods on the Fruit prototype property, and all instances of the Fruit function will inherit all the Fruit\'92s properties and methods.\
\
*/
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 // inheritance chain\'97when you call b.name it return Banana instead of Mango since in the search chain the search for name will first search on b object, if there is no property created on it , it goes to its parent, there exists a property name on FRUIT it would return from there instead of going to the next level to search.\
\
function Plant()\{\
this.name=\'93Mango\'94;\
  this.place="India";\
this.isorganic=true;\
\}\
\
Plant.prototype.testorganic=function()\{\
  if(this.isorganic)\{\
  console.log(this.name+"isorganic");\
  \}\
\}\
\
function Fruit(name,color,price)\{\
this.name=name;\
 this.color=color;\
 this.price=price;\
\}\
console.log(Fruit.constructor);\
Fruit.prototype=new Plant();\
\
Fruit.prototype.displaynamecolor=function()\{\
  console.log("name is: "+this.name+"color is: "+this.color);\
\}\
\
var b=new Fruit("banana","yellow",10);\
b.displaynamecolor();\
b.testorganic();\
var a=\{aa:"1",bb:"2"\};\
console.log("constructor of a: "+a.constructor);}