{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 function Animal()\{\
this.name="Animal";\
  this.toString=function()\{\
   return "My name is "+this.name;\
  \}\
\}\
function Canine()\{\
this.name="Canine";\
\}\
function Wolf()\{\
this.name="Wolf";\
\}\
Canine.prototype= new Animal();\
Wolf.prototype=new Canine();\
console.log(Canine.prototype.constructor+" "+Wolf.prototype.constructor);\
Canine.prototype.constructor=Canine;\
Wolf.prototype.constructor=Wolf;\
\
var w=new Wolf();\
console.log(w.toString());\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
function Animal()\{\
this.name="Animal";\
  this.toString=function()\{\
   return "My name is "+this.name;\
  \}\
\}\
function Canine()\{\
this.name="Canine";\
\}\
function Wolf()\{\
\
\} Wolf.prototype.name="Wolf\'94;\'97\'97\'97if it is here value return is Canine since we override prototype with canine\'92s;\
\
Canine.prototype= new Animal();\
Wolf.prototype=new Canine();\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Wolf.prototype.name="Wolf\'94;\'97\'97\'97if it is here value return is Wolf\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 console.log(Canine.prototype.constructor+" "+Wolf.prototype.constructor);\
Wolf.prototype.constructor=Wolf;\'97after the prototype is set ,the constructor is set to object object\'92s constructor so reset to original here.\
var w=new Wolf();\
console.log(w.toString());\
VM1052:15 function Animal()\{\
this.name="Animal";\
  this.toString=function()\{\
   return "My name is "+this.name;\
  \}\
\} function Animal()\{\
this.name="Animal";\
  this.toString=function()\{\
   return "My name is "+this.name;\
  \}\
\}\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97define common method and call\
function extend(child, parent) \{\
  var Temp = function () \{\
  \};  \
  Temp.prototype = parent.prototype;\
  child.prototype = new parent();\
  child.prototype.constructor = child;\
\}\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97execute parent method and extend it.\
function calc() \{\
  this.var1 = 0;\
  this.var2 = 0;\
\}\
calc.prototype = \{\
  add: function () \{\
    return this.var1 + this.var2;\
  \}\
\}\
Object.defineProperty(calc.prototype, 'Asignvalues', \{\
  set: function (value) \{\
    var parts = value.toString().split(',');\
    this.var1 = parts[0];\
    this.var2 = parts[1];\
  \},\
  get: function () \{\
    return this.var1 + ' ' + this.var2;\
  \}\
\});\
function advancedcalc() \{\
\}\
advancedcalc.prototype = new calc();\
advancedcalc.prototype.constructor = advancedcalc;\
advancedcalc.prototype.add = function () \{\
  var value = calc.prototype.add.apply(this);\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97execute parent method here.\
  return value + ' ' + 'success';\
\}\
var acal = new advancedcal();\
acal.Asignvalues = '2,3';\
acal.add();\
Output:'23 success'\
\
}